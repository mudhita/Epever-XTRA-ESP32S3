#include <ModbusMaster.h>

#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

// Konstanta dan variabel global
const int defaultBaudRate = 115200;
ModbusMaster node;
uint8_t currentRegistryNumber = 0;

// Fungsi untuk beralih ke registri berikutnya
void nextRegistryNumber() {
  currentRegistryNumber++;
  if (currentRegistryNumber >= ARRAY_SIZE(Registries)) {
    currentRegistryNumber = 0;
  }
}

// Fungsi untuk mengeksekusi fungsi pembacaan registri saat ini (berputar antara alamat yang berbeda)
void executeCurrentRegistryFunction() {
  RegistriescurrentRegistryNumber;
}

// Fungsi untuk membaca dan mencetak data dari alamat registri yang berbeda
void readAndPrintData(uint16_t address, uint8_t count, const char* label) {
  uint8_t result = node.readInputRegisters(address, count);
  if (result == node.ku8MBSuccess) {
    float value = node.getResponseBuffer(0x00) / 100.0f;
    Serial.print(label);
    Serial.println(value);
  } else {
    Serial.print("Read register ");
    Serial.print(address, HEX);
    Serial.println(" failed!");
  }
}

// Fungsi untuk membaca dan mencetak data dari alamat registri yang berbeda dengan nilai 16 bit
void readAndPrintData16(uint16_t address, uint8_t count, const char* label) {
  uint8_t result = node.readInputRegisters(address, count);
  if (result == node.ku8MBSuccess) {
    float value = (node.getResponseBuffer(0x00) | node.getResponseBuffer(0x01) << 16) / 100.0f;
    Serial.print(label);
    Serial.println(value);
  } else {
    Serial.print("Read register ");
    Serial.print(address, HEX);
    Serial.println(" failed!");
  }
}

// Daftar fungsi untuk dipanggil secara berurutan
typedef void (*RegistryList[])();
RegistryList Registries = {
  readAndPrintData(0x3100, 6, "PV Voltage: "),
  readAndPrintData16(0x3106, 2, "Battery Charge Power: "),
  readAndPrintData(0x310D, 3, "Load Current: "),
  readAndPrintData(0x311A, 2, "Battery Remaining %: "),
  readAndPrintData16(0x331B, 2, "Battery Discharge Current: "),
};

void setup() {
  Serial.begin(defaultBaudRate);
  Serial1.begin(defaultBaudRate, SERIAL_8N1, 4, 5);  //rx 4, tx
}

void loop() {
  executeCurrentRegistryFunction();
  nextRegistryNumber();
  delay(1000);
}
